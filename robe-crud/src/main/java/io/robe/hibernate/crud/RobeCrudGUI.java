/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package io.robe.hibernate.crud;


import japa.parser.ast.ImportDeclaration;
import japa.parser.ast.body.BodyDeclaration;
import japa.parser.ast.expr.NameExpr;

import javax.persistence.Column;
import javax.swing.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import static org.reflections.ReflectionUtils.*;

/**
 * @author serayuzgur
 */
public class RobeCrudGUI extends javax.swing.JFrame {
    public static final String JAVA_IO_TMP_DIR = "user.home";


    /**
     * Creates new form RobeCrudGUI
     */
    public RobeCrudGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        tfProjectPath = new javax.swing.JTextField();
        btnProjectPath = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jProgressBar2 = new javax.swing.JProgressBar();
        btnGenerate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select Project:");

        tfProjectPath.setText("None");

        btnProjectPath.setText("Select");
        btnProjectPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProjectPathActionPerformed(evt);
            }
        });

        jLabel2.setText("Entities:");

        jLabel3.setForeground(new java.awt.Color(255, 0, 51));
        jLabel3.setText("(Please configure)");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                        {"Empty", false, false, false, false},
                },
                new String[]{
                        "Entitiy", "Dao", "Resource", "Inject", "Auth"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jScrollPane1)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabel1)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(jLabel2)
                                                                        .addGap(18, 18, 18)
                                                                        .addComponent(jLabel3)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(tfProjectPath, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btnProjectPath)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnGenerate)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(tfProjectPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnProjectPath))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jProgressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(btnGenerate))
                                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnProjectPathActionPerformed(java.awt.event.ActionEvent evt) {

        JFileChooser dialog = new JFileChooser("/Users/serayuzgur/Development/robe/robe-crud");
//        JFileChooser dialog = new JFileChooser(System.getProperty(JAVA_IO_TMP_DIR));

        dialog.setMultiSelectionEnabled(false);
        dialog.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int retval = dialog.showOpenDialog(this);
        if (retval == JFileChooser.APPROVE_OPTION) {
            File file = dialog.getSelectedFile();
            tfProjectPath.setText(file.getAbsolutePath());

            fillEntityList(file.getAbsolutePath());
        }
    }

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {

     Object[][] tableData= getTableData(jTable1);
        int i = 0;
        for (Object[] data : tableData) {
            String entity=(String)data[0];
            Boolean dao=(Boolean)data[1];
            Boolean resource=(Boolean)data[2];
            Boolean inject=(Boolean)data[3];
            Boolean auth=(Boolean)data[4];
            System.out.println(entity);
            System.out.println(inject);

            String fileDaoLocation = "robe-crud" + "/src/main/java/" + "test.com.robe.hibernate.generated.dao".replace('.', '/');
            System.out.println("DAO: " + fileDaoLocation);
            new File(fileDaoLocation).mkdirs();

            String fileResourceLocation = "robe-crud" + "/src/main/java/" + "test.com.robe.hibernate.generated.resource".replace('.', '/');
            System.out.println("RESOURCES: " + fileResourceLocation);
            new File(fileResourceLocation).mkdirs();

            try {
                Class<?> classes= Class.forName(entity);

                String newDaoClassName=fileDaoLocation+"/"+classes.getSimpleName()+"Dao.java";

                Set<Field> fields = getAllFields(classes, withAnnotation(Column.class));
                List<String> fieldGet = new ArrayList<String>();
                List<String> uniqueFields= new ArrayList<String>();
                for (Field field : fields) {
                    if (!field.getAnnotation(Column.class).unique()) {
                        Set<Method> getters = getAllMethods(classes,
                                withModifier(Modifier.PUBLIC), withPrefix("get"+CrudUtility.capitalizeToUpper(field.getName())), withParametersCount(0));
                        if(getters.iterator().hasNext()){
                            fieldGet.add(CrudUtility.capitalizeToUpper(field.getName()));
                        }
                    }else if(field.getAnnotation(Column.class).unique()){
                        Set<Method> checks = getAllMethods(classes,
                                withModifier(Modifier.PUBLIC), withPrefix("get"+CrudUtility.capitalizeToUpper(field.getName())), withParametersCount(0));
                        if(checks.iterator().hasNext()){
                            uniqueFields.add(CrudUtility.capitalizeToUpper(field.getName()));
                            fieldGet.add(CrudUtility.capitalizeToUpper(field.getName()));
                        }
                    }
                }

                String entityName=classes.getSimpleName();
                String daoName=classes.getSimpleName()+"Dao";

                String findBy="findById";
                for (String string : uniqueFields) {
                    findBy+="Or"+CrudUtility.capitalizeToUpper(string);
                }
                if(dao) {
                    List<ImportDeclaration> importDeclarations = new ArrayList<ImportDeclaration>();
                    importDeclarations.add(new ImportDeclaration(new NameExpr(classes.getName().toString()), false, false));


                    File fileDao = new File(newDaoClassName);
                    if (!fileDao.exists()) {
                        fileDao.createNewFile();
                    }
                    FileWriter fwDao = null;
                    fwDao = new FileWriter(fileDao.getAbsoluteFile());
                    BufferedWriter bwDao = new BufferedWriter(fwDao);
                    bwDao.write(DaoCrud.createDao(entityName, "test.com.robe.hibernate.generated.dao", importDeclarations, uniqueFields, findBy));
                    bwDao.close();
                    System.out.println("DAO CREATED SUCCESSFUL FOR " +entity);

                }
                if(resource) {

                    String newResourceClassName = fileResourceLocation + "/" + classes.getSimpleName() + "Resource.java";
                    File fileResource = new File(newResourceClassName);
                    if (!fileResource.exists()) {
                        fileResource.createNewFile();
                    }
                    FileWriter fwResource = new FileWriter(fileResource.getAbsoluteFile());
                    BufferedWriter bwResource = new BufferedWriter(fwResource);
                    List<BodyDeclaration> bodyDeclarations = new ArrayList<BodyDeclaration>();

                    bodyDeclarations.add(ResourceCrud.getAll(entityName, daoName, "findAll"));
                    bodyDeclarations.add(ResourceCrud.get(entityName, daoName, findBy));
                    bodyDeclarations.add(ResourceCrud.create(entityName, daoName, uniqueFields, "create"));
                    bodyDeclarations.add(ResourceCrud.update(entityName, daoName, fieldGet, "getOid", findBy, "update", "detach"));
                    bodyDeclarations.add(ResourceCrud.delete(entityName, daoName, "getOid", findBy, "delete"));
                    List<ImportDeclaration> importDeclarationsResource = new ArrayList<ImportDeclaration>();
                    importDeclarationsResource.addAll(CrudUtility.getImports("com.google.inject.Inject", "com.yammer.dropwizard.auth.Auth", "com.yammer.dropwizard.hibernate.UnitOfWork"));
                    bwResource.write(ResourceCrud.ResourceGenerate(entityName + "Resource", entityName, daoName, bodyDeclarations, importDeclarationsResource, "test.com.robe.hibernate.generated.resource", inject));
                    bwResource.close();
                    System.out.println("RESOURCE CREATED SUCCESSFUL FOR " +entity);
                }

            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }


    }
    public Object[][] getTableData (JTable table) {
        javax.swing.table.DefaultTableModel dtm = (javax.swing.table.DefaultTableModel) table.getModel();
        int nRow = dtm.getRowCount(), nCol = dtm.getColumnCount();
        Object[][] tableData = new Object[nRow][nCol];
        for (int i = 0 ; i < nRow ; i++)
            for (int j = 0 ; j < nCol ; j++)
                tableData[i][j] = dtm.getValueAt(i,j);
        return tableData;
    }

    private void fillEntityList(String absolutePath) {
//        Properties properties = new Properties();
//        properties.put("packageScan","io.robe.hibernate.crud.entity");
//        properties.put("packageDao","io.robe.hibernate.generated.dao");
//        properties.put("packageResource","io.robe.hibernate.generated.resource");
//        properties.put("projectPath",absolutePath);
//
//        try {
//            HibernateCrud.generateDaoAndResource(properties);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
        Set<Class<?>> entityClasses = HibernateCrud.getEntityClasses("io.robe.hibernate.crud.entity");
        Object[][] list = new Object[entityClasses.size()][5];
        int i = 0;
        for (Class entityClass : entityClasses) {
            list[i][0] = entityClass.getName();
            list[i][1] = true;
            list[i][2] = true;
            list[i][3] = true;
            list[i++][4] = true;


        }

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                list,
                new String[]{
                        "Entitiy", "Dao", "Resource", "Inject", "Auth"
                }
        ) {
            Class[] types = new Class[]{
                    java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RobeCrudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RobeCrudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RobeCrudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RobeCrudGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RobeCrudGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnProjectPath;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tfProjectPath;
    // End of variables declaration                   
}
