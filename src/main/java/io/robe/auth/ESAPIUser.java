package io.robe.auth;

import org.owasp.esapi.User;
import org.owasp.esapi.errors.AuthenticationException;
import org.owasp.esapi.errors.AuthenticationHostException;
import org.owasp.esapi.errors.EncryptionException;

import javax.servlet.http.HttpSession;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Set;

/**
 * Created by serayuzgur on 06/02/14.
 */
public class ESAPIUser implements User {

    protected ESAPIUser(io.robe.admin.hibernate.entity.User user) {
        setAccountName(user.getEmail());
        setScreenName(user.getName() + " " + user.getSurname());
    }

    /**
     * @return the locale
     */
    @Override
    public Locale getLocale() {
        return null;
    }

    /**
     * @param locale the locale to set
     */
    @Override
    public void setLocale(Locale locale) {

    }

    /**
     * Adds a role to this user's account.
     *
     * @param role the role to add
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public void addRole(String role) throws AuthenticationException {

    }

    /**
     * Adds a set of roles to this user's account.
     *
     * @param newRoles the new roles to add
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public void addRoles(Set<String> newRoles) throws AuthenticationException {

    }

    /**
     * Sets the user's password, performing a verification of the user's old password, the equality of the two new
     * passwords, and the strength of the new password.
     *
     * @param oldPassword  the old password
     * @param newPassword1 the new password
     * @param newPassword2 the new password - used to verify that the new password was typed correctly
     * @throws org.owasp.esapi.errors.AuthenticationException if newPassword1 does not match newPassword2, if oldPassword does not match the stored old password, or if the new password does not meet complexity requirements
     * @throws org.owasp.esapi.errors.EncryptionException
     */
    @Override
    public void changePassword(String oldPassword, String newPassword1, String newPassword2) throws AuthenticationException, EncryptionException {

    }

    /**
     * Disable this user's account.
     */
    @Override
    public void disable() {

    }

    /**
     * Enable this user's account.
     */
    @Override
    public void enable() {

    }

    /**
     * Gets this user's account id number.
     *
     * @return the account id
     */
    @Override
    public long getAccountId() {
        return 0;
    }

    /**
     * Gets this user's account name.
     *
     * @return the account name
     */
    @Override
    public String getAccountName() {
        return null;
    }

    /**
     * Gets the CSRF token for this user's current sessions.
     *
     * @return the CSRF token
     */
    @Override
    public String getCSRFToken() {
        return null;
    }

    /**
     * Returns the date that this user's account will expire.
     *
     * @return Date representing the account expiration time.
     */
    @Override
    public Date getExpirationTime() {
        return null;
    }

    /**
     * Returns the number of failed login attempts since the last successful login for an account. This method is
     * intended to be used as a part of the account lockout feature, to help protect against brute force attacks.
     * However, the implementor should be aware that lockouts can be used to prevent access to an application by a
     * legitimate user, and should consider the risk of denial of admin.
     *
     * @return the number of failed login attempts since the last successful login
     */
    @Override
    public int getFailedLoginCount() {
        return 0;
    }

    /**
     * Returns the last host address used by the user. This will be used in any log messages generated by the processing
     * of this request.
     *
     * @return the last host address used by the user
     */
    @Override
    public String getLastHostAddress() {
        return null;
    }

    /**
     * Returns the date of the last failed login time for a user. This date should be used in a message to users after a
     * successful login, to notify them of potential attack activity on their account.
     *
     * @return date of the last failed login
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public Date getLastFailedLoginTime() throws AuthenticationException {
        return null;
    }

    /**
     * Returns the date of the last successful login time for a user. This date should be used in a message to users
     * after a successful login, to notify them of potential attack activity on their account.
     *
     * @return date of the last successful login
     */
    @Override
    public Date getLastLoginTime() {
        return null;
    }

    /**
     * Gets the date of user's last password change.
     *
     * @return the date of last password change
     */
    @Override
    public Date getLastPasswordChangeTime() {
        return null;
    }

    /**
     * Gets the roles assigned to a particular account.
     *
     * @return an immutable set of roles
     */
    @Override
    public Set<String> getRoles() {
        return null;
    }

    /**
     * Gets the screen name (alias) for the current user.
     *
     * @return the screen name
     */
    @Override
    public String getScreenName() {
        return null;
    }

    /**
     * Adds a session for this User.
     *
     * @param s The session to associate with this user.
     */
    @Override
    public void addSession(HttpSession s) {

    }

    /**
     * Removes a session for this User.
     *
     * @param s The session to remove from being associated with this user.
     */
    @Override
    public void removeSession(HttpSession s) {

    }

    /**
     * Returns the list of sessions associated with this User.
     *
     * @return
     */
    @Override
    public Set getSessions() {
        return null;
    }

    /**
     * Increment failed login count.
     */
    @Override
    public void incrementFailedLoginCount() {

    }

    /**
     * Checks if user is anonymous.
     *
     * @return true, if user is anonymous
     */
    @Override
    public boolean isAnonymous() {
        return false;
    }

    /**
     * Checks if this user's account is currently enabled.
     *
     * @return true, if account is enabled
     */
    @Override
    public boolean isEnabled() {
        return false;
    }

    /**
     * Checks if this user's account is expired.
     *
     * @return true, if account is expired
     */
    @Override
    public boolean isExpired() {
        return false;
    }

    /**
     * Checks if this user's account is assigned a particular role.
     *
     * @param role the role for which to check
     * @return true, if role has been assigned to user
     */
    @Override
    public boolean isInRole(String role) {
        return false;
    }

    /**
     * Checks if this user's account is locked.
     *
     * @return true, if account is locked
     */
    @Override
    public boolean isLocked() {
        return false;
    }

    /**
     * Tests to see if the user is currently logged in.
     *
     * @return true, if the user is logged in
     */
    @Override
    public boolean isLoggedIn() {
        return false;
    }

    /**
     * Tests to see if this user's session has exceeded the absolute time out based
     * on ESAPI's configuration settings.
     *
     * @return true, if user's session has exceeded the absolute time out
     */
    @Override
    public boolean isSessionAbsoluteTimeout() {
        return false;
    }

    /**
     * Tests to see if the user's session has timed out from inactivity based
     * on ESAPI's configuration settings.
     * <p/>
     * A session may timeout prior to ESAPI's configuration setting due to
     * the servlet container setting for session-timeout in web.xml. The
     * following is an example of a web.xml session-timeout set for one hour.
     * <p/>
     * <session-config>
     * <session-timeout>60</session-timeout>
     * </session-config>
     *
     * @return true, if user's session has timed out from inactivity based
     * on ESAPI configuration
     */
    @Override
    public boolean isSessionTimeout() {
        return false;
    }

    /**
     * Lock this user's account.
     */
    @Override
    public void lock() {

    }

    /**
     * Login with password.
     *
     * @param password the password
     * @throws org.owasp.esapi.errors.AuthenticationException if login fails
     */
    @Override
    public void loginWithPassword(String password) throws AuthenticationException {

    }

    /**
     * Logout this user.
     */
    @Override
    public void logout() {

    }

    /**
     * Removes a role from this user's account.
     *
     * @param role the role to remove
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public void removeRole(String role) throws AuthenticationException {

    }

    /**
     * Returns a token to be used as a prevention against CSRF attacks. This token should be added to all links and
     * forms. The application should verify that all requests contain the token, or they may have been generated by a
     * CSRF attack. It is generally best to perform the check in a centralized location, either a filter or controller.
     * See the verifyCSRFToken method.
     *
     * @return the new CSRF token
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public String resetCSRFToken() throws AuthenticationException {
        return null;
    }

    /**
     * Sets this user's account name.
     *
     * @param accountName the new account name
     */
    @Override
    public void setAccountName(String accountName) {

    }

    /**
     * Sets the date and time when this user's account will expire.
     *
     * @param expirationTime the new expiration time
     */
    @Override
    public void setExpirationTime(Date expirationTime) {

    }

    /**
     * Sets the roles for this account.
     *
     * @param roles the new roles
     * @throws org.owasp.esapi.errors.AuthenticationException the authentication exception
     */
    @Override
    public void setRoles(Set<String> roles) throws AuthenticationException {

    }

    /**
     * Sets the screen name (username alias) for this user.
     *
     * @param screenName the new screen name
     */
    @Override
    public void setScreenName(String screenName) {

    }

    /**
     * Unlock this user's account.
     */
    @Override
    public void unlock() {

    }

    /**
     * Verify that the supplied password matches the password for this user. This method
     * is typically used for "reauthentication" for the most sensitive functions, such
     * as transactions, changing email address, and changing other account information.
     *
     * @param password the password that the user entered
     * @return true, if the password passed in matches the account's password
     * @throws org.owasp.esapi.errors.EncryptionException
     */
    @Override
    public boolean verifyPassword(String password) throws EncryptionException {
        return false;
    }

    /**
     * Set the time of the last failed login for this user.
     *
     * @param lastFailedLoginTime the date and time when the user just failed to login correctly.
     */
    @Override
    public void setLastFailedLoginTime(Date lastFailedLoginTime) {

    }

    /**
     * Set the last remote host address used by this user.
     *
     * @param remoteHost The address of the user's current source host.
     */
    @Override
    public void setLastHostAddress(String remoteHost) throws AuthenticationHostException {

    }

    /**
     * Set the time of the last successful login for this user.
     *
     * @param lastLoginTime the date and time when the user just successfully logged in.
     */
    @Override
    public void setLastLoginTime(Date lastLoginTime) {

    }

    /**
     * Set the time of the last password change for this user.
     *
     * @param lastPasswordChangeTime the date and time when the user just successfully changed his/her password.
     */
    @Override
    public void setLastPasswordChangeTime(Date lastPasswordChangeTime) {

    }

    /**
     * Returns the hashmap used to store security events for this user. Used by the
     * IntrusionDetector.
     */
    @Override
    public HashMap getEventMap() {
        return null;
    }

    /**
     * Returns the name of this principal.
     *
     * @return the name of this principal.
     */
    @Override
    public String getName() {
        return null;
    }
}
